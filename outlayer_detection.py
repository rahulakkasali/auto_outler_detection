# -*- coding: utf-8 -*-
"""Outlayer_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N61rUFomFm3b1Q_j_kq-hu3LrM1X40Xo
"""

pip install tensorflow pandas numpy matplotlib scikit-learn

pip install seaborn

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

df=pd.read_csv('/content/creditcard.csv')

df.sample(5)

df.shape

print(df.isnull().sum())

df = df.dropna()

normal_data=df[df.Class==0]
faurd_data=df[df.Class==1]
df.drop('Class',axis=1)

scaler= StandardScaler()
df_scaled=scaler.fit_transform(df)

df_scaled

X_train, X_test = train_test_split(df_scaled, test_size=0.2, random_state=42)

input_dim = X_train.shape[1]

autoencoder = tf.keras.Sequential([
    tf.keras.layers.Input(shape=(input_dim,)),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(16, activation='relu'),
    tf.keras.layers.Dense(8, activation='relu'),
    tf.keras.layers.Dense(16, activation='relu'),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(input_dim, activation='linear')
])

autoencoder.compile(optimizer='adam', loss='mse')
autoencoder.summary()

history = autoencoder.fit(
    X_train, X_train,
    epochs=25,
    batch_size=256,

)

X_pred = autoencoder.predict(X_test)
reconstruction_error = np.mean(np.square(X_test - X_pred), axis=1)

threshold = np.percentile(reconstruction_error, 95)
print("Reconstruction Threshold:", threshold)

outliers = reconstruction_error > threshold
cleaned_data = X_test[~outliers]

print("Original test data size:", X_test.shape[0])
print("Cleaned data size:", cleaned_data.shape[0])
print("Number of outliers:", np.sum(outliers))

plt.figure(figsize=(12,6))
plt.scatter(cleaned_data[:, 0], cleaned_data[:, 1], c='blue', label='Cleaned Data')
plt.scatter(X_test[outliers, 0], X_test[outliers, 1], c='red', label='Outliers')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.title('Cleaned Data vs Outliers')
plt.legend()
plt.show()